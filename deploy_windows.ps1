# === –ù–ê–°–¢–†–û–ô–ö–ò ===
$repoUrl = "https://github.com/VSZ2020/WeatherAggregator.git"
$baseDir = "C:\deploy"
$releasesDir = "$baseDir\releases"
$currentLink = "$baseDir\current"
$logFile = "$baseDir\deploy.log"
# $telegramBotToken = "your_bot_token"
# $telegramChatId = "your_chat_id"
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$newRelease = "$releasesDir\release_$timestamp"

function Log($msg) {
    $entry = "[{0}] {1}" -f (Get-Date -Format "yyyy-MM-dd HH:mm:ss"), $msg
    $entry | Tee-Object -Append -FilePath $logFile
}

# function Send-Telegram($text) {
#     Invoke-RestMethod -Uri "https://api.telegram.org/bot$telegramBotToken/sendMessage" `
#         -Method Post -Body @{
#             chat_id = $telegramChatId
#             text    = $text
#         } | Out-Null
# }

Log "[*] –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è: $timestamp"
Send-Telegram "üöÄ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω: $timestamp"

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç ===
$nginxConfig = Get-Content "C:\nginx\conf\fastapi.conf"
if ($nginxConfig -match "127.0.0.1:8001") {
    $newPort = 8002
    $oldPort = 8001
} else {
    $newPort = 8001
    $oldPort = 8002
}

# === –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ===
Log "[*] –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
git clone $repoUrl $newRelease

# === –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ===
Log "[*] –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
python -m venv "$newRelease\venv"
& "$newRelease\venv\Scripts\Activate.ps1"
pip install --upgrade pip
pip install -r "$newRelease\requirements.txt"

# === –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ===
Log "[*] –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É $newPort"
$mainScript = "$newRelease\main.py"
$logPath = "$newRelease\uvicorn.log"
$pidFile = "$newRelease\uvicorn.pid"

Start-Process `
    -FilePath "$newRelease\venv\Scripts\python.exe" `
    -ArgumentList "-m uvicorn main:app --host 127.0.0.1 --port $newPort" `
    -WorkingDirectory $newRelease `
    -RedirectStandardOutput $logPath `
    -RedirectStandardError $logPath `
    -PassThru | ForEach-Object { $_.Id | Out-File $pidFile -Encoding ascii }

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nginx-–∫–æ–Ω—Ñ–∏–≥–∞ ===
Log "[*] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ nginx –Ω–∞ –ø–æ—Ä—Ç $newPort"
(gc "C:\nginx\conf\fastapi.conf") -replace "127.0.0.1:$oldPort", "127.0.0.1:$newPort" | Set-Content "C:\nginx\conf\fastapi.conf"
Start-Process -FilePath "nginx.exe" -ArgumentList "-s reload" -WorkingDirectory "C:\nginx" -NoNewWindow -Wait

# === –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–ª–∏–Ω–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å junction) ===
if (Test-Path $currentLink) {
    Remove-Item $currentLink -Force
}
cmd /c mklink /J "$currentLink" "$newRelease" | Out-Null

# === –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ===
$oldRelease = Get-ChildItem "$releasesDir" | Sort-Object LastWriteTime -Descending | Select-Object -Skip 1 -First 1
$oldPidFile = "$($oldRelease.FullName)\uvicorn.pid"

if (Test-Path $oldPidFile) {
    $oldPid = Get-Content $oldPidFile
    try {
        Stop-Process -Id $oldPid -Force
        Log "[*] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å $oldPid"
        Remove-Item $oldPidFile
    } catch {
        Log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PID $oldPid"
    }
}

# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ (> 7 –¥–Ω–µ–π) ===
Log "[*] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–ª–∏–∑—ã"
Get-ChildItem $releasesDir | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Recurse -Force

Log "[‚úì] –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω: –ø–æ—Ä—Ç $newPort"
# Send-Telegram "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ –ø–æ—Ä—Ç—É $newPort`n–ü–∞–ø–∫–∞: $newRelease"
